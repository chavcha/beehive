@using System.Security.Cryptography
@using System.Text
@using Microsoft.IdentityModel.Tokens
@{
    Layout = null;
}
@model ChatMessagePageModel

<!DOCTYPE html>
<html lang="ru" class="scroll-smooth">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Beehive | @Model.Chat.Title</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    colors: {
                        beehive: {
                            yellow: '#fbbf24',
                            dark: '#1f2937'
                        }
                    }
                }
            }
        }
    </script>
    <style>
        .light-theme {
            background-image: url('/images/светлая тема.png');
        }

        .dark-theme {
            background-image: url('/images/темная тема 1.png');
        }

        .message-self {
            apply bg-yellow-100 dark:bg-yellow-900 rounded-l-lg rounded-tr-lg ml-auto;
        }

        .message-other {
            apply bg-gray-100 dark:bg-gray-800 rounded-r-lg rounded-tl-lg mr-auto;
        }

        .message-container {
            height: calc(100vh - 200px);
        }

        .scrollable-column {
            max-height: 300px;
            overflow-y: auto;
        }

        .msg {
            border: 2px solid #fbbf24; /* Яркая оранжевая рамка */
            border-radius: 0.75rem;
            padding: 0.75rem 1rem;
            margin-bottom: 0.75rem;
            max-width: 80%;
            word-wrap: break-word;
            background-color: white; /* Белый фон в светлой теме */
            color: #1f2937; /* Темный текст в светлой теме */
        }

        .msg-self {
            border: 2px solid #fbbf24; /* Такая же рамка, но другой фон */
            border-radius: 0.75rem;
            padding: 0.75rem 1rem;
            margin-bottom: 0.75rem;
            max-width: 80%;
            margin-left: auto;
            word-wrap: break-word;
            background-color: #fef3c7; /* Светло-оранжевый фон для своих сообщений */
            color: #1f2937; /* Темный текст */
        }

        /* Стили для темной темы */
        .dark .msg {
            background-color: #1f2937; /* Темный фон */
            color: #f3f4f6; /* Светлый текст */
            border-color: #f59e0b; /* Более яркая рамка в темной теме */
        }

        .dark .msg-self {
            background-color: #92400e; /* Темно-оранжевый фон для своих сообщений */
            color: #f3f4f6; /* Светлый текст */
            border-color: #f59e0b;
        }

        .sender-name {
            font-weight: 600;
            margin-bottom: 0.25rem;
            color: #fbbf24;
        }

        .dark .sender-name {
            color: #fcd34d; /* Более светлый оттенок в темной теме */
        }

        .msg-datetime {
            font-size: 0.75rem;
            color: #6b7280;
            margin-top: 0.25rem;
            text-align: right;
        }

        .dark .msg-datetime {
            color: #9ca3af; /* Светло-серый в темной теме */
        }
    </style>
</head>
<body class="light-theme min-h-screen bg-cover bg-center bg-no-repeat">
    <div hidden id="chat-id">@Model.Chat.Id</div>
    <!-- Верхнее меню -->
    <nav class="w-full backdrop-blur-md bg-white/95 dark:bg-neutral-900/95 shadow-md sticky top-0 z-20 border-b border-gray-200 dark:border-neutral-700 transition-colors duration-300">
        <div class="max-w-6xl mx-auto px-6 flex items-center justify-between h-16">
            <div class="flex items-center">
                <a href="/Home/Index" class="mr-6" title="На главную">
                    <img src="/images/beehive logo.png" alt="Beehive" class="h-7 w-7 object-contain">
                </a>
                <ul class="flex space-x-8 font-semibold text-gray-700 dark:text-gray-300 select-none">
                    <li>
                        <a href="/Direct/Search" class="hover:text-yellow-500 transition flex items-center" title="Поиск">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                            </svg>
                        </a>
                    </li>
                    <li><a href="/Chat/NewChat" class="hover:text-yellow-500 transition">Чаты</a></li>
                    <li><a href="/Chat/Messages" class="hover:text-yellow-500 transition">Сообщения</a></li>
                    <li><a href="/Home/Friends" class="hover:text-yellow-500 transition">Друзья</a></li>
                    <li><a href="/Home/Posts" class="hover:text-yellow-500 transition">Лента</a></li>
                    <li><a href="/Home/Profile" class="hover:text-yellow-500 transition">Профиль</a></li>

                </ul>

                <h1 class="text-xl font-semibold text-gray-700 dark:text-gray-300">@Model.Chat.Title</h1>
            </div>
            <div class="flex items-center gap-4">
                <button id="theme-toggle" class="relative p-2 text-gray-700 dark:text-yellow-300 hover:text-gray-900 dark:hover:text-yellow-400 transition-colors duration-300">
                    <!-- Иконки темы -->
                    <svg id="moon-icon" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 opacity-0 dark:opacity-100 absolute inset-0 m-auto transition-opacity duration-300" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z" />
                    </svg>
                    <svg id="sun-icon" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 opacity-100 dark:opacity-0 transition-opacity duration-300" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
                    </svg>
                </button>
                <a href="/Chat/Index" class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-1 rounded-lg shadow transition">
                    Назад
                </a>
            </div>
        </div>
    </nav>

    <!-- Основной контент -->
    <main class="max-w-7xl mx-auto flex h-[calc(100vh-64px)]">
        <!-- Левая панель - сообщения -->
        <div class="flex-1 flex flex-col border-r border-gray-200 dark:border-neutral-700">
            <!-- Поиск -->
            <div class="p-4 border-b border-gray-200 dark:border-neutral-700">
                <form method="get" asp-action="SearchMsgs" class="flex gap-2">
                    <input name="query" type="text" placeholder="Поиск сообщений..."
                           class="flex-grow px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-yellow-500 text-gray-800 dark:text-gray-100">
                    <button type="submit" class="px-4 py-2 bg-yellow-500 hover:bg-yellow-600 text-white rounded-lg transition">
                        Найти
                    </button>
                </form>
            </div>

            <!-- Сообщения -->
            <div id="msg-list" class="flex-1 overflow-y-auto p-4 space-y-4">
                
                    <div hidden id="chat-id">
                        @Model.Chat.Id
                    </div>
                    
                    <div class="main-space">
                        <div style="{overflow-y: scroll}" class="msg-scroller main-space" id="msg-list">
                            @{
                                var rsaSelf = RSA.Create();
                                rsaSelf.ImportEncryptedPkcs8PrivateKey(GlobalVals.ReadPassKey(Model.Current.Id),
                                Model.Current.EncryptedPrivateKey, out var _);
                                var rsaOthers = new Dictionary<Guid, RSA>();
                                RSA pointer;
                                //string cl;
                                foreach (var msg in Model.Messages)
                                {
                                    <br />
                                    if (msg.Sender.Id == @Model.Current.Id)
                                        pointer = rsaSelf;
                                    else
                                    {
                                        if (!rsaOthers.ContainsKey(msg.Sender.Id))
                                        {
                                            rsaOthers.Add(msg.Sender.Id, RSA.Create());
                                            rsaOthers[msg.Sender.Id].ImportEncryptedPkcs8PrivateKey(GlobalVals.ReadPassKey(msg.Sender.Id),
                                            msg.Sender.EncryptedPrivateKey, out var _);
                                        }
                                        pointer = rsaOthers[msg.Sender.Id];
                                    }
                                    // cl = msg.Sender.Id == @Model.CurrentId.Id ? "msg-self" : "msg";

                                    <div class="msg">
                                        <div class="sender-name">
                                            @msg.Sender.Name
                                        </div>
                                        <div>
                                            @Encoding.Unicode.GetString(pointer.Decrypt(msg.Text, RSAEncryptionPadding.OaepSHA256))
                                        </div>
                                        <div class="msg-datetime">
                                            @msg.SentAt.ToShortTimeString()
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                
            </div>

            <!-- Форма отправки -->
            <div class="p-4 border-t border-gray-200 dark:border-neutral-700">
                <div class="flex gap-2">
                    <textarea id="msg-input" asp-for="MessageText"
                              class="flex-grow px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-yellow-500 text-gray-800 dark:text-gray-100"
                              placeholder="Напишите сообщение..."></textarea>
                    <button onclick="send()" class="px-4 py-2 bg-yellow-500 hover:bg-yellow-600 text-white rounded-lg transition">
                        Отправить
                    </button>
                </div>
                <div class="mt-2 flex justify-end">
                    <button class="text-sm text-yellow-500 hover:text-yellow-600 transition">
                        Прикрепить файл
                    </button>
                </div>
            </div>
        </div>

        <!-- Правая панель - информация о чате -->
        <div class="w-80 hidden md:block p-4 backdrop-blur-md bg-white/90 dark:bg-neutral-900/90">
            <div class="sticky top-4 space-y-6">
                <div class="flex justify-end">
                    <button class="p-2 text-gray-500 hover:text-yellow-500 transition">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M6 10a2 2 0 11-4 0 2 2 0 014 0zM12 10a2 2 0 11-4 0 2 2 0 014 0zM16 12a2 2 0 100-4 2 2 0 000 4z" />
                        </svg>
                    </button>
                </div>

                <div class="space-y-4">
                    <h2 class="text-xl font-bold text-gray-800 dark:text-gray-200">@Model.Chat.Title</h2>

                    @if (!string.IsNullOrEmpty(Model.Chat.ShortDescription))
                    {
                        <div>
                            <h3 class="text-sm font-semibold text-gray-600 dark:text-gray-400">Краткое описание</h3>
                            <p class="text-gray-800 dark:text-gray-200">@Model.Chat.ShortDescription</p>
                        </div>
                    }
                </div>

                <div class="border-t border-gray-200 dark:border-neutral-700 pt-4">
                    <h3 class="text-sm font-semibold text-gray-600 dark:text-gray-400 mb-2">Участники</h3>
                    <div class="space-y-2">
                        <!-- TODO: Список участников -->
                        <div class="text-center py-4 text-gray-500 dark:text-gray-400">
                            Список участников будет здесь
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Подключение SignalR -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.min.js"></script>
    <script>
        // Инициализация соединения
        "use strict"

        const hub = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .build();
        hub.start();

        hub.on("Receive", (msg, dt) => getMsg(msg, dt, false));

        hub.on("ReceiveSelf", (msg, dt) => getMsg(msg, dt, true));

        function getMsg(text, dtv, isSelf) {
            var e = document.createElement("div");
            var t = document.createElement("div");
            var br = document.createElement("br");
            t.textContent = text;
            if (isSelf) e.className = "msg-self";
            else e.className = "msg";
            e.appendChild(br);
            e.appendChild(t);
            var dt = document.createElement("div");
            dt.className = "msg-datetime";
            dt.textContent = dtv;
            e.appendChild(dt);
            document.getElementById("msg-list").appendChild(e);
        }

        function send() {
            var id = document.getElementById("chat-id").textContent.trim();
            var text = document.getElementById("msg-input").value;
            fetch(`/Chat/Send?id=${id}`, {
                method: "POST",
                body: text
            })
                .then(res => res.text())
                .then(txt => {
                    hub.invoke("Send", id, text, txt);
                    document.getElementById("msg-input").value = ""; // Очищаем поле ввода после отправки
                });
        }

        // Скрипт переключения темы
        document.addEventListener('DOMContentLoaded', function() {
            const themeToggle = document.getElementById('theme-toggle');
            const moonIcon = document.getElementById('moon-icon');
            const sunIcon = document.getElementById('sun-icon');
            const html = document.documentElement;
            const body = document.body;

            function setTheme(isDark) {
                if (isDark) {
                    html.classList.add('dark');
                    body.classList.add('dark-theme');
                    body.classList.remove('light-theme');
                    moonIcon.classList.add('opacity-100');
                    moonIcon.classList.remove('opacity-0');
                    sunIcon.classList.add('opacity-0');
                    sunIcon.classList.remove('opacity-100');
                } else {
                    html.classList.remove('dark');
                    body.classList.remove('dark-theme');
                    body.classList.add('light-theme');
                    moonIcon.classList.add('opacity-0');
                    moonIcon.classList.remove('opacity-100');
                    sunIcon.classList.add('opacity-100');
                    sunIcon.classList.remove('opacity-0');
                }
            }

            const savedTheme = localStorage.getItem('theme');
            const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;

            if (savedTheme === 'dark' || (!savedTheme && systemPrefersDark)) {
                setTheme(true);
            }

            themeToggle.addEventListener('click', () => {
                const isDark = !html.classList.contains('dark');
                localStorage.setItem('theme', isDark ? 'dark' : 'light');
                setTheme(isDark);
            });
        });
    </script>
</body>
</html>